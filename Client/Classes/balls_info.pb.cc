// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "balls_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveBalls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveBalls_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveBall_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_balls_5finfo_2eproto() {
  protobuf_AddDesc_balls_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "balls_info.proto");
  GOOGLE_CHECK(file != NULL);
  BallInfo_descriptor_ = file->message_type(0);
  static const int BallInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, sock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, y_),
  };
  BallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallInfo_descriptor_,
      BallInfo::default_instance_,
      BallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallInfo));
  BallsInfo_descriptor_ = file->message_type(1);
  static const int BallsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallsInfo, ball_),
  };
  BallsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallsInfo_descriptor_,
      BallsInfo::default_instance_,
      BallsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallsInfo));
  CreateBall_descriptor_ = file->message_type(2);
  static const int CreateBall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBall, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBall, y_),
  };
  CreateBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateBall_descriptor_,
      CreateBall::default_instance_,
      CreateBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateBall));
  RemoveBall_descriptor_ = file->message_type(3);
  static const int RemoveBall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBall, sock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBall, id_),
  };
  RemoveBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveBall_descriptor_,
      RemoveBall::default_instance_,
      RemoveBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveBall));
  RemoveBalls_descriptor_ = file->message_type(4);
  static const int RemoveBalls_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBalls, rm_ball_),
  };
  RemoveBalls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveBalls_descriptor_,
      RemoveBalls::default_instance_,
      RemoveBalls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBalls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBalls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveBalls));
  MoveBall_descriptor_ = file->message_type(5);
  static const int MoveBall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBall, sock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBall, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBall, v_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBall, v_dir_),
  };
  MoveBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveBall_descriptor_,
      MoveBall::default_instance_,
      MoveBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveBall));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_balls_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallInfo_descriptor_, &BallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallsInfo_descriptor_, &BallsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateBall_descriptor_, &CreateBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveBall_descriptor_, &RemoveBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveBalls_descriptor_, &RemoveBalls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveBall_descriptor_, &MoveBall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_balls_5finfo_2eproto() {
  delete BallInfo::default_instance_;
  delete BallInfo_reflection_;
  delete BallsInfo::default_instance_;
  delete BallsInfo_reflection_;
  delete CreateBall::default_instance_;
  delete CreateBall_reflection_;
  delete RemoveBall::default_instance_;
  delete RemoveBall_reflection_;
  delete RemoveBalls::default_instance_;
  delete RemoveBalls_reflection_;
  delete MoveBall::default_instance_;
  delete MoveBall_reflection_;
}

void protobuf_AddDesc_balls_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020balls_info.proto\"E\n\010BallInfo\022\014\n\004sock\030\001"
    " \001(\005\022\n\n\002id\030\002 \001(\005\022\t\n\001r\030\003 \001(\001\022\t\n\001x\030\004 \001(\001\022\t"
    "\n\001y\030\005 \001(\001\"$\n\tBallsInfo\022\027\n\004ball\030\001 \003(\0132\t.B"
    "allInfo\".\n\nCreateBall\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002"
    " \001(\001\022\t\n\001y\030\003 \001(\001\"&\n\nRemoveBall\022\014\n\004sock\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\005\"+\n\013RemoveBalls\022\034\n\007rm_bal"
    "l\030\001 \003(\0132\013.RemoveBall\"B\n\010MoveBall\022\014\n\004sock"
    "\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005v_val\030\003 \001(\001\022\r\n\005v_d"
    "ir\030\004 \001(\001", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "balls_info.proto", &protobuf_RegisterTypes);
  BallInfo::default_instance_ = new BallInfo();
  BallsInfo::default_instance_ = new BallsInfo();
  CreateBall::default_instance_ = new CreateBall();
  RemoveBall::default_instance_ = new RemoveBall();
  RemoveBalls::default_instance_ = new RemoveBalls();
  MoveBall::default_instance_ = new MoveBall();
  BallInfo::default_instance_->InitAsDefaultInstance();
  BallsInfo::default_instance_->InitAsDefaultInstance();
  CreateBall::default_instance_->InitAsDefaultInstance();
  RemoveBall::default_instance_->InitAsDefaultInstance();
  RemoveBalls::default_instance_->InitAsDefaultInstance();
  MoveBall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_balls_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_balls_5finfo_2eproto {
  StaticDescriptorInitializer_balls_5finfo_2eproto() {
    protobuf_AddDesc_balls_5finfo_2eproto();
  }
} static_descriptor_initializer_balls_5finfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BallInfo::kSockFieldNumber;
const int BallInfo::kIdFieldNumber;
const int BallInfo::kRFieldNumber;
const int BallInfo::kXFieldNumber;
const int BallInfo::kYFieldNumber;
#endif  // !_MSC_VER

BallInfo::BallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallInfo::InitAsDefaultInstance() {
}

BallInfo::BallInfo(const BallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallInfo::SharedCtor() {
  _cached_size_ = 0;
  sock_ = 0;
  id_ = 0;
  r_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallInfo::~BallInfo() {
  SharedDtor();
}

void BallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallInfo_descriptor_;
}

const BallInfo& BallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

BallInfo* BallInfo::default_instance_ = NULL;

BallInfo* BallInfo::New() const {
  return new BallInfo;
}

void BallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sock_ = 0;
    id_ = 0;
    r_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sock_)));
          set_has_sock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_r;
        break;
      }
      
      // optional double r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }
      
      // optional double x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }
      
      // optional double y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sock = 1;
  if (has_sock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sock(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional double r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->r(), output);
  }
  
  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }
  
  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sock = 1;
  if (has_sock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sock(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional double r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->r(), target);
  }
  
  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }
  
  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sock = 1;
    if (has_sock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sock());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double r = 3;
    if (has_r()) {
      total_size += 1 + 8;
    }
    
    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallInfo::MergeFrom(const BallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sock()) {
      set_sock(from.sock());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInfo::CopyFrom(const BallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallInfo::IsInitialized() const {
  
  return true;
}

void BallInfo::Swap(BallInfo* other) {
  if (other != this) {
    std::swap(sock_, other->sock_);
    std::swap(id_, other->id_);
    std::swap(r_, other->r_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallInfo_descriptor_;
  metadata.reflection = BallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallsInfo::kBallFieldNumber;
#endif  // !_MSC_VER

BallsInfo::BallsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallsInfo::InitAsDefaultInstance() {
}

BallsInfo::BallsInfo(const BallsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallsInfo::~BallsInfo() {
  SharedDtor();
}

void BallsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallsInfo_descriptor_;
}

const BallsInfo& BallsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

BallsInfo* BallsInfo::default_instance_ = NULL;

BallsInfo* BallsInfo::New() const {
  return new BallsInfo;
}

void BallsInfo::Clear() {
  ball_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BallInfo ball = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ball;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BallInfo ball = 1;
  for (int i = 0; i < this->ball_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BallInfo ball = 1;
  for (int i = 0; i < this->ball_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallsInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .BallInfo ball = 1;
  total_size += 1 * this->ball_size();
  for (int i = 0; i < this->ball_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ball(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallsInfo::MergeFrom(const BallsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ball_.MergeFrom(from.ball_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallsInfo::CopyFrom(const BallsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallsInfo::IsInitialized() const {
  
  return true;
}

void BallsInfo::Swap(BallsInfo* other) {
  if (other != this) {
    ball_.Swap(&other->ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallsInfo_descriptor_;
  metadata.reflection = BallsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateBall::kIdFieldNumber;
const int CreateBall::kXFieldNumber;
const int CreateBall::kYFieldNumber;
#endif  // !_MSC_VER

CreateBall::CreateBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateBall::InitAsDefaultInstance() {
}

CreateBall::CreateBall(const CreateBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateBall::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateBall::~CreateBall() {
  SharedDtor();
}

void CreateBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBall_descriptor_;
}

const CreateBall& CreateBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

CreateBall* CreateBall::default_instance_ = NULL;

CreateBall* CreateBall::New() const {
  return new CreateBall;
}

void CreateBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }
      
      // optional double x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }
      
      // optional double y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional double x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }
  
  // optional double y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional double x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }
  
  // optional double y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateBall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateBall::MergeFrom(const CreateBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBall::CopyFrom(const CreateBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBall::IsInitialized() const {
  
  return true;
}

void CreateBall::Swap(CreateBall* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateBall_descriptor_;
  metadata.reflection = CreateBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveBall::kSockFieldNumber;
const int RemoveBall::kIdFieldNumber;
#endif  // !_MSC_VER

RemoveBall::RemoveBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveBall::InitAsDefaultInstance() {
}

RemoveBall::RemoveBall(const RemoveBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveBall::SharedCtor() {
  _cached_size_ = 0;
  sock_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveBall::~RemoveBall() {
  SharedDtor();
}

void RemoveBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveBall_descriptor_;
}

const RemoveBall& RemoveBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

RemoveBall* RemoveBall::default_instance_ = NULL;

RemoveBall* RemoveBall::New() const {
  return new RemoveBall;
}

void RemoveBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sock_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sock_)));
          set_has_sock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sock = 1;
  if (has_sock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sock(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sock = 1;
  if (has_sock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sock(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveBall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sock = 1;
    if (has_sock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sock());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveBall::MergeFrom(const RemoveBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sock()) {
      set_sock(from.sock());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveBall::CopyFrom(const RemoveBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBall::IsInitialized() const {
  
  return true;
}

void RemoveBall::Swap(RemoveBall* other) {
  if (other != this) {
    std::swap(sock_, other->sock_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveBall_descriptor_;
  metadata.reflection = RemoveBall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveBalls::kRmBallFieldNumber;
#endif  // !_MSC_VER

RemoveBalls::RemoveBalls()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveBalls::InitAsDefaultInstance() {
}

RemoveBalls::RemoveBalls(const RemoveBalls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveBalls::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveBalls::~RemoveBalls() {
  SharedDtor();
}

void RemoveBalls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveBalls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveBalls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveBalls_descriptor_;
}

const RemoveBalls& RemoveBalls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

RemoveBalls* RemoveBalls::default_instance_ = NULL;

RemoveBalls* RemoveBalls::New() const {
  return new RemoveBalls;
}

void RemoveBalls::Clear() {
  rm_ball_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveBalls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RemoveBall rm_ball = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rm_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rm_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rm_ball;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveBalls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RemoveBall rm_ball = 1;
  for (int i = 0; i < this->rm_ball_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rm_ball(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveBalls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RemoveBall rm_ball = 1;
  for (int i = 0; i < this->rm_ball_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rm_ball(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveBalls::ByteSize() const {
  int total_size = 0;
  
  // repeated .RemoveBall rm_ball = 1;
  total_size += 1 * this->rm_ball_size();
  for (int i = 0; i < this->rm_ball_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rm_ball(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveBalls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveBalls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveBalls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveBalls::MergeFrom(const RemoveBalls& from) {
  GOOGLE_CHECK_NE(&from, this);
  rm_ball_.MergeFrom(from.rm_ball_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveBalls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveBalls::CopyFrom(const RemoveBalls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBalls::IsInitialized() const {
  
  return true;
}

void RemoveBalls::Swap(RemoveBalls* other) {
  if (other != this) {
    rm_ball_.Swap(&other->rm_ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveBalls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveBalls_descriptor_;
  metadata.reflection = RemoveBalls_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveBall::kSockFieldNumber;
const int MoveBall::kIdFieldNumber;
const int MoveBall::kVValFieldNumber;
const int MoveBall::kVDirFieldNumber;
#endif  // !_MSC_VER

MoveBall::MoveBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveBall::InitAsDefaultInstance() {
}

MoveBall::MoveBall(const MoveBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveBall::SharedCtor() {
  _cached_size_ = 0;
  sock_ = 0;
  id_ = 0;
  v_val_ = 0;
  v_dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveBall::~MoveBall() {
  SharedDtor();
}

void MoveBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveBall_descriptor_;
}

const MoveBall& MoveBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

MoveBall* MoveBall::default_instance_ = NULL;

MoveBall* MoveBall::New() const {
  return new MoveBall;
}

void MoveBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sock_ = 0;
    id_ = 0;
    v_val_ = 0;
    v_dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sock_)));
          set_has_sock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_v_val;
        break;
      }
      
      // optional double v_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_val_)));
          set_has_v_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_v_dir;
        break;
      }
      
      // optional double v_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_dir_)));
          set_has_v_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sock = 1;
  if (has_sock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sock(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional double v_val = 3;
  if (has_v_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v_val(), output);
  }
  
  // optional double v_dir = 4;
  if (has_v_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->v_dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sock = 1;
  if (has_sock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sock(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional double v_val = 3;
  if (has_v_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v_val(), target);
  }
  
  // optional double v_dir = 4;
  if (has_v_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->v_dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveBall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sock = 1;
    if (has_sock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sock());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double v_val = 3;
    if (has_v_val()) {
      total_size += 1 + 8;
    }
    
    // optional double v_dir = 4;
    if (has_v_dir()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveBall::MergeFrom(const MoveBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sock()) {
      set_sock(from.sock());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_v_val()) {
      set_v_val(from.v_val());
    }
    if (from.has_v_dir()) {
      set_v_dir(from.v_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveBall::CopyFrom(const MoveBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveBall::IsInitialized() const {
  
  return true;
}

void MoveBall::Swap(MoveBall* other) {
  if (other != this) {
    std::swap(sock_, other->sock_);
    std::swap(id_, other->id_);
    std::swap(v_val_, other->v_val_);
    std::swap(v_dir_, other->v_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveBall_descriptor_;
  metadata.reflection = MoveBall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
