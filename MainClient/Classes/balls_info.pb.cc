// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "balls_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallsInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_balls_5finfo_2eproto() {
  protobuf_AddDesc_balls_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "balls_info.proto");
  GOOGLE_CHECK(file != NULL);
  BallInfo_descriptor_ = file->message_type(0);
  static const int BallInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, y_),
  };
  BallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallInfo_descriptor_,
      BallInfo::default_instance_,
      BallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallInfo));
  BallsInfo_descriptor_ = file->message_type(1);
  static const int BallsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallsInfo, ball_),
  };
  BallsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallsInfo_descriptor_,
      BallsInfo::default_instance_,
      BallsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallsInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_balls_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallInfo_descriptor_, &BallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallsInfo_descriptor_, &BallsInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_balls_5finfo_2eproto() {
  delete BallInfo::default_instance_;
  delete BallInfo_reflection_;
  delete BallsInfo::default_instance_;
  delete BallsInfo_reflection_;
}

void protobuf_AddDesc_balls_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020balls_info.proto\"7\n\010BallInfo\022\n\n\002id\030\001 \002"
    "(\005\022\t\n\001r\030\002 \002(\001\022\t\n\001x\030\003 \002(\001\022\t\n\001y\030\004 \002(\001\"$\n\tB"
    "allsInfo\022\027\n\004ball\030\001 \003(\0132\t.BallInfo", 113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "balls_info.proto", &protobuf_RegisterTypes);
  BallInfo::default_instance_ = new BallInfo();
  BallsInfo::default_instance_ = new BallsInfo();
  BallInfo::default_instance_->InitAsDefaultInstance();
  BallsInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_balls_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_balls_5finfo_2eproto {
  StaticDescriptorInitializer_balls_5finfo_2eproto() {
    protobuf_AddDesc_balls_5finfo_2eproto();
  }
} static_descriptor_initializer_balls_5finfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BallInfo::kIdFieldNumber;
const int BallInfo::kRFieldNumber;
const int BallInfo::kXFieldNumber;
const int BallInfo::kYFieldNumber;
#endif  // !_MSC_VER

BallInfo::BallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallInfo::InitAsDefaultInstance() {
}

BallInfo::BallInfo(const BallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  r_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallInfo::~BallInfo() {
  SharedDtor();
}

void BallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallInfo_descriptor_;
}

const BallInfo& BallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

BallInfo* BallInfo::default_instance_ = NULL;

BallInfo* BallInfo::New() const {
  return new BallInfo;
}

void BallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    r_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_r;
        break;
      }
      
      // required double r = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }
      
      // required double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }
      
      // required double y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required double r = 2;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->r(), output);
  }
  
  // required double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }
  
  // required double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required double r = 2;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->r(), target);
  }
  
  // required double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }
  
  // required double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required double r = 2;
    if (has_r()) {
      total_size += 1 + 8;
    }
    
    // required double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallInfo::MergeFrom(const BallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInfo::CopyFrom(const BallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void BallInfo::Swap(BallInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(r_, other->r_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallInfo_descriptor_;
  metadata.reflection = BallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallsInfo::kBallFieldNumber;
#endif  // !_MSC_VER

BallsInfo::BallsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallsInfo::InitAsDefaultInstance() {
}

BallsInfo::BallsInfo(const BallsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallsInfo::~BallsInfo() {
  SharedDtor();
}

void BallsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallsInfo_descriptor_;
}

const BallsInfo& BallsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_balls_5finfo_2eproto();  return *default_instance_;
}

BallsInfo* BallsInfo::default_instance_ = NULL;

BallsInfo* BallsInfo::New() const {
  return new BallsInfo;
}

void BallsInfo::Clear() {
  ball_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BallInfo ball = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ball;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BallInfo ball = 1;
  for (int i = 0; i < this->ball_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BallInfo ball = 1;
  for (int i = 0; i < this->ball_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallsInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .BallInfo ball = 1;
  total_size += 1 * this->ball_size();
  for (int i = 0; i < this->ball_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ball(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallsInfo::MergeFrom(const BallsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ball_.MergeFrom(from.ball_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallsInfo::CopyFrom(const BallsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallsInfo::IsInitialized() const {
  
  for (int i = 0; i < ball_size(); i++) {
    if (!this->ball(i).IsInitialized()) return false;
  }
  return true;
}

void BallsInfo::Swap(BallsInfo* other) {
  if (other != this) {
    ball_.Swap(&other->ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallsInfo_descriptor_;
  metadata.reflection = BallsInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
